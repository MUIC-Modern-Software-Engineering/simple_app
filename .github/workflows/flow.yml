name: CI/CD Flow

on: [ push ]

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.4.0"
  CONTAINER_REGISTRY: swecontainer22.azurecr.io
  IMAGE_NAME: simple_app

# Need:
#secrets.REGISTRY_USERNAME
#secrets.REGISTRY_PASSWORD

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with isort
        uses: isort/isort-action@master
        with:
          isortVersion: "5.10.1"

      - name: Lint with black
        uses: psf/black@stable
        with:
          version: "22.3.0"

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  test-and-coverage:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Test with Pytest
        run: |
          poetry run pytest

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 7

  build-and-upload:
    needs: [test-and-coverage]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry
        run: |
          curl -sL https://install.python-poetry.org | POETRY_VERSION=${{ env.POETRY_VERSION }} python - -y
      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.in-project true

      - name: Set up Poetry cache
        id: poetry-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Build
        run: |
          poetry build

      - name: Upload tarball and wheel
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist
          if-no-files-found: error

#  sonarqube:
#    # runs after test-and-coverage job
#    needs: test-and-coverage
#    runs-on: ubuntu-20.04
#
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          # Disabling shallow clone is recommended for improving relevancy of reporting
#          fetch-depth: 0
#
#      - name: Download coverage report artifact
#        uses: actions/download-artifact@v2
#        with:
#          name: coverage-report
#
#      - name: SonarQube Scan
#        uses: sonarsource/sonarcloud-github-action@master
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  docker:
    needs: test-and-coverage
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
